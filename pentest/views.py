from django.http import JsonResponse
from django.shortcuts import render, HttpResponse
from .models import inject_data, filter_data, proxy_data, sqlmap_log
from .proxy import start_proxy, shutdown_proxy
from lib.config_json import *
from pentest.injection import *
import socket
from django.views.decorators.csrf import csrf_exempt
import subprocess


def proxy(request):
    domain = request.GET.get("domain") or ""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = sock.connect_ex(('127.0.0.1', PROXY_LISTEN_PORT))  # 监听端口的开启情况
    if result == 0:
        port_status = "启动"
    else:
        port_status = "关闭"
    host = PROXY_LISTEN_HOST
    port = PROXY_LISTEN_PORT
    return render(request, "pentest/proxy.html", locals())


def settings(request):
    if request.method == "POST":
        SQLMAP_DBMS = request.POST.get('SQLMAP_DBMS')
        SQLMAP_REQUESTFILE = request.POST.get('SQLMAP_REQUESTFILE')
        SQLMAP_LEVEL = request.POST.get('SQLMAP_LEVEL')
        SQLMAP_RISK = request.POST.get('SQLMAP_RISK')
        SQLMAP_API_SERVER = request.POST.get('SQLMAP_API_SERVER')
        PROXY_LISTEN_PORT = request.POST.get('PROXY_LISTEN_PORT')
        PROXY_LISTEN_MODE = request.POST.get('PROXY_LISTEN_MODE')
        PROXY_CACER_DIR = request.POST.get('PROXY_CACER_DIR')
        EXCLUDE_STATIC_FILE = request.POST.get('EXCLUDE_STATIC_FILE')

        allow_dbms = ["MySQL", "Firebird", "H2", "HSQLDB", "IBM DB2", "Informix", "Microsoft Access",
                      "Microsoft SQL Server", "Oracle", "PostgreSQL", "SAP MaxDB", "SQLite", "Sybase"]
        for i in allow_dbms:
            if SQLMAP_DBMS == i.lower():
                # SQLMAP_DBMS)
                break
    return render(request, "pentest/pentest_setting.html", locals())


def index(request):
    return render(request, "pentest/injection.html", locals())


def passive_sqli(request):
    domain = request.GET.get("domain") or ""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = sock.connect_ex(('127.0.0.1', int(SQLMAP_API_SERVER.split(':')[-1])))  # 监听端口的开启情况
    if result == 0:
        port_status = "启动"
    else:
        port_status = "关闭"
    return render(request, "pentest/passive_sqli.html", locals())


def start_sqlmap(request):
    if request.method == 'POST':
        tp = request.POST.get('type')
        domain = request.POST.get('domain') or ""
        results = filter_data.objects.filter(host__icontains=domain)
        if tp == "start":
            for i in results:
                run_sqlmap(i.id)
        elif tp == "restart":
            for result in results:
                result.status = '0'
                result.taskid = ''
                result.save()
            for i in results:
                #print(i.id)
                run_sqlmap(i.id)
        else:
            return JsonResponse({"code":0,"msg":"type error"})


        return JsonResponse({"code": 200, "msg": "starting"})

    return render(request, "pentest/sqlmap.html", locals())


def get_inject_data(request):
    domain = request.GET.get('domain') or ""
    try:
        page = int(request.GET.get("page")) or 1
    except:
        page = 1
    try:
        limit = int(request.GET.get("limit")) or 30
    except:
        limit = 30
    start = (page - 1) * limit
    end = page * limit

    results = inject_data.objects.filter(host__icontains=domain)[start:end].values("id", "taskid", "url", "dbms",
                                                                                   "run_status", "parameter", "host",
                                                                                   "log_status")
    count = inject_data.objects.all().count()

    data = []
    for i in results:
        data.append(i)
    return JsonResponse({"code": 0, "msg": "", "count": count, "data": data}, safe=False)


def update_auth(request):
    if request.method == 'POST':
        tp = request.POST.get('type')
        parm = request.POST.get('parm')
        domain = request.POST.get('domain')
        modify_content = request.POST.get('content')
        modify_auth(tp=tp, parm=parm, host=domain, modify=modify_content)
        return JsonResponse({"code": 200, "msg": "update success!!!"})

    return render(request, "pentest/update_auth.html", locals())


def check_log(request):
    taskid = request.GET.get("taskid")
    data = filter_data.objects.filter(taskid=taskid)[0].data_packet
    log = sqlmap_log.objects.get(taskid=taskid).log

    return render(request, "pentest/check_log.html", locals())

def check_data(request):
    taskid = request.GET.get("taskid")
    data = filter_data.objects.filter(taskid=taskid)[0].data_packet

    return render(request, "pentest/check_data.html", locals())



def start_sqlmap_api(request):
    os.system("python " + SQLMAP_PATH + "sqlmapapi.py -s " + SQLMAP_API_SERVER + " >/tmp/sqlmap_log 2>&1 &")
    return JsonResponse({"code": 200, "msg": "start success!!!"})


def stop_sqlmap_api(request):
    os.system("ps aux | grep " + SQLMAP_API_SERVER + " | awk {'print$2'} | xargs kill -9 ")
    return JsonResponse({"code": 200, "msg": "stop success!!!"})


def filter_packect(request):
    filter()
    return JsonResponse({"code": 200, "msg": "filter success!!!"})


def starting_proxy(request):
    start_proxy()
    return JsonResponse({"code": 0, "msg": "error!!!!"})


def stop_proxy(request):
    shutdown_proxy()


def start_scan(request):
    scan()
    return HttpResponse('start scan')


def listen(request):
    capture()
    return HttpResponse('开始监听')


def injection_data(request):
    taskid = request.GET.get("taskid")
    result = inject_data.objects.get(taskid=taskid)
    return render(request, "pentest/injection_data.html", locals())


def display_proxy_data(request):
    domain = request.GET.get('domain') or ""
    t = request.GET.get("type")
    try:
        page = int(request.GET.get("page")) or 1
    except:
        page = 1
    try:
        limit = int(request.GET.get("limit")) or 30
    except:
        limit = 30
    start = (page - 1) * limit
    end = page * limit
    if t == "all":
        results = proxy_data.objects.filter(host__icontains=domain)[start:end].values("id", "method", "url",
                                                                                      "request_content")
        count = proxy_data.objects.all().count()
    elif t == "filter":

        results = filter_data.objects.filter(host__icontains=domain)[start:end].values("id", "url", "parm", )
        count = filter_data.objects.all().count()

    data = []
    for i in results:
        data.append(i)
    return JsonResponse({"code": 0, "msg": "", "count": count, "data": data}, safe=False)
