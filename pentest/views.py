from django.http import JsonResponse
from django.shortcuts import render,HttpResponse
from .models import inject_data,filter_data,proxy_data
from .injection import autosqli
from lib.config_json import *
import socket
from banruo.config import *

def sql(request):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    port_status = sock.connect_ex(('127.0.0.1', PROXY_LISTEN_PORT))#监听端口的开启情况

    return render(request,"pentest/sql.html",locals())

def settings(request):


    if request.method == "POST":
        SQLMAP_DBMS = request.POST.get('SQLMAP_DBMS')
        SQLMAP_REQUESTFILE = request.POST.get('SQLMAP_REQUESTFILE')
        SQLMAP_LEVEL = request.POST.get('SQLMAP_LEVEL')
        SQLMAP_RISK = request.POST.get('SQLMAP_RISK')
        SQLMAP_API_SERVER = request.POST.get('SQLMAP_API_SERVER')
        PROXY_LISTEN_PORT = request.POST.get('PROXY_LISTEN_PORT')
        PROXY_LISTEN_MODE = request.POST.get('PROXY_LISTEN_MODE')
        PROXY_CACER_DIR = request.POST.get('PROXY_CACER_DIR')
        EXCLUDE_STATIC_FILE = request.POST.get('EXCLUDE_STATIC_FILE')

        allow_dbms = ["MySQL", "Firebird", "H2", "HSQLDB", "IBM DB2", "Informix", "Microsoft Access", "Microsoft SQL Server", "Oracle", "PostgreSQL", "SAP MaxDB", "SQLite", "Sybase"]
        for i in allow_dbms:
            if SQLMAP_DBMS == i.lower():
                #SQLMAP_DBMS)
                break




    return render(request,"pentest/pentest_setting.html",locals())

def index(request):
    return render(request,"pentest/injection.html",locals())

def injection(request):
    proxy = proxy_data.objects.all()
    filter = filter_data.objects.all()
    inject = inject_data.objects.all()
    return  render(request,"pentest/injection.html",locals())

def display_proxy_data(request):
    id = request.GET.get("id")
    result = proxy_data.objects.get(id=id)
    return render(request, "pentest/display_proxy_data.html", locals())

def display_filter_data(request):
    id = request.GET.get("id")
    result = filter_data.objects.get(id=id)
    return render(request, "pentest/display_filter_data.html", locals())

def start_scan(request):
    scan()
    return HttpResponse('start scan')

def listen(request):
    capture()
    return HttpResponse('开始监听')

def injection_data(request):
    taskid = request.GET.get("taskid")
    result = inject_data.objects.get(taskid=taskid)
    return render(request,"pentest/injection_data.html",locals())


def sqlmap_result(request):
    try:
        page = int(request.GET.get("page")) or 1
    except:
        page = 1
    try:
        limit = int(request.GET.get("limit")) or 10
    except:
        limit = 10
    start = (page - 1) * limit
    end = page * limit
    results = inject_data.objects.all()[start:end].values("id","taskid","run_status")
    count = inject_data.objects.all().count()
    data = []
    for i in results:
        data.append(i)
    return JsonResponse({"code":0,"msg":"","count":count,"data":data},safe=False)